package bsp.distributions;

import beast.evolution.tree.Tree;
import beast.evolution.tree.coalescent.BayesianSkyline;
import beast.evolution.tree.coalescent.TreeIntervals;
import beast.math.Binomial;
import beast.util.TreeParser;
import junit.framework.TestCase;
import org.junit.Test;
import test.beast.BEASTTestCase;


/**
 * Unit tests for bsp.distributions.BSP.java
 *
 * - Compare likelihood to the classical and generalized skyline plots in Ape
 * - Compare likelihood to the original Bayesian Skyline Plot implementation in BEAST2 core (beast.evolution.tree.coalescent.BayesianSkyline.java)
 * - Test methods for getting segment change times
 * - Test methods for getting population size at different times (this is slightly different to the original Bayesian Skyline Plot)
 *
 *
 **/
public class BSPTest extends TestCase {

    /****************************************************************/
    /* Comparisons to Ape (classical and generalized skyline plots) */
    /****************************************************************/
    /*
     * Need to add a constant to the likelihood, since the constant is implemented in Ape, but not in BEAST
     *
     */

    @Test
    public void testApeTreeLikelihood1 () {

        System.out.println("BSP compared to classical skyline plot in Ape: " +
                "Small tree with homochronous sampling.");

        Tree tree = new TreeParser("((D4Philip56:30.0,(D4Philip64:23.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:25.0,(D4Thai78:11.0,D4Thai84:11.0):14.0):15.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "165 120  12  15  10", "popSizeGroupSizes", "1 1 1 1 1", "treeIntervals", intervals);
        double logP = skyline1.calculateLogP();

        double C = 0;
        for (int i = 0; i < 5; i++) {
            C += Math.log(Binomial.choose2(i+2));
        }

        double expected = -14.487972108574;
        assertEquals(expected, logP+C, BEASTTestCase.PRECISION);
        //System.out.println(logP + "\t" + C +"\t" + (logP+C));

        System.out.println(skyline1);
    }


    @Test
    public void testApeTreeLikelihood2 () {

        System.out.println("BSP compared to classical skyline plot in Ape: " +
                "Big tree with homochronous sampling.");

        Tree tree = new TreeParser("(((((((((((A97DCA1EQTB52:0.077166,A97DCA1MBFE185:0.077166):0.008836,(A97DCA1MBS12:0.049821,A97DCA1MBS30:0.049821):0.036182):0.010266,A97DCA1SJDS17:0.096270):0.003116,(A97DCA1KCD9:0.083123,A97DCA1KTB185:0.083123):0.016262):0.002506,A97DCA1KFE58:0.101892):0.046439,(A97DCA1KP18:0.119083,(A97DCA1KP28:0.092297,(A97DCA1KP78:0.090247,A97DCA1MBS63:0.090247):0.002049):0.026786):0.029248):0.003031,(((A97DCA2KP82:0.050058,A97DCA2KP86:0.050058):0.067136,A97DCA2MBCD5:0.117195):0.027195,((((A97DCEQS1:0.101879,A97DCKFE326:0.101879):0.014125,A97DCMBS32:0.116003):0.019791,(A97DCEQS18:0.091575,A97DCKP72:0.091575):0.044219):0.000001,((((((A97DCEQS25:0.078087,A97DCKS34:0.078087):0.036307,A97DCKS47:0.114394):0.006016,(A97DCKMST147:0.103929,(A97DCKMST89:0.091417,A97DCKTB6:0.091417):0.012512):0.016482):0.000086,((((A97DCEQTB44:0.108703,((A97DCKDS85:0.080907,A97DCMBS26:0.080907):0.023577,A97DCKTB79:0.104485):0.004218):0.005284,(A97DCKTB118:0.090239,A97DCKTB132:0.090239):0.023749):0.000575,(A97DCKCC4:0.111547,(((A97DCKP25:0.087787,A97DCKTB7:0.087787):0.018267,A97DCMBS9:0.106055):0.001233,(A97DCKS36:0.094007,A97DCKTB37:0.094007):0.013281):0.004259):0.003015):0.004429,(((A97DCKCD6:0.082435,(A97DCMBFE149:0.069344,A97DCMBFE247:0.069344):0.013092):0.000001,((A97DCKFE198:0.065151,A97DCKP77:0.065151):0.013338,(A97DCKMST52:0.070506,A97DCKS7:0.070506):0.007982):0.003946):0.012315,A97DCKTB36:0.094750):0.024241):0.001504):0.007409,(((A97DCKP36:0.107066,A97DCKTB16:0.107066):0.009046,(A97DCMBS28:0.105021,A97DCMBTB54:0.105021):0.011089):0.011793,(((A97DCKP5:0.113319,(((A97DCMBFE155:0.079795,(A97DCMBFE244:0.057624,A97DCMBFE78:0.057624):0.022171):0.017550,A97DCMBS7:0.097346):0.000001,A97DCMBS341:0.097346):0.015975):0.000815,((A97DCKTB157:0.094386,(A97DCMBP2:0.070132,A97DCMBS4:0.070132):0.024254):0.005564,A97DCMBTB29:0.099950):0.014184):0.007922,A97DCMBDS17:0.122057):0.005848):0.000001):0.000001,((((((A97DCEQS45:0.059728,A97DCEQS49:0.059728):0.021193,A97DCKS56:0.080921):0.007725,A97DCEQTB14:0.088646):0.028870,A97DCKTB20:0.117516):0.000214,A97DCKTB44:0.117729):0.004694,((((((A97DCKCC2:0.021163,A97DCKCC3:0.021163):0.050237,A97DCKTB13:0.071400):0.033783,A97DCKMST140:0.105183):0.004152,(A97DCKMST121:0.101085,((A97DCKP43:0.069726,A97DCKP79:0.069726):0.025382,(A97DCKS55:0.094174,A97DCKTB124:0.094174):0.000933):0.005977):0.008249):0.004330,((A97DCKFE4:0.067768,A97DCKS10:0.067768):0.012439,A97DCKTB48:0.080208):0.033457):0.000001,((A97DCKFE288:0.080093,(A97DCMBFE5:0.063013,A97DCSJFE26:0.063013):0.017081):0.009386,(A97DCKMST50:0.082718,A97DCKS14:0.082718):0.006759):0.024185):0.008758):0.005482):0.007891):0.008594):0.006973):0.029972,(((U97DCKFE267:0.068246,U97DCKTB119:0.068246):0.012677,U97DCMBFE250:0.080923):0.085378,U97DCKMST91:0.166301):0.015033):0.015665,(((E97DCEQS21:0.083436,(E97DCEQS5:0.077774,E97DCKP14:0.077774):0.005662):0.007143,E97DCEQTB60:0.090579):0.044516,(U97DCKFE45:0.089540,U97DCKTB49:0.089540):0.045555):0.061904):0.000001,(((D97DCD1KCD4:0.088821,D97DCD1KMST126:0.088821):0.036417,((((((((((D97DCD1KS2:0.059334,D97DCKP54:0.059334):0.024482,D97DCKP44:0.083817):0.006959,D97DCKTB181:0.090775):0.006373,(D97DCMBS55:0.057578,D97DCMBS56:0.057578):0.039570):0.004811,(D97DCD2KTB23:0.096432,D97DCKMST66:0.096432):0.005529):0.000001,(D97DCKMST30:0.058580,D97DCKP1:0.058580):0.043380):0.002729,((D97DCKS11:0.081263,D97DCKTB27:0.081263):0.013417,(D97DCKTB4:0.094129,D97DCMBS35:0.094129):0.000553):0.010008):0.003638,(D97DCD2KS26:0.104385,D97DCKS15:0.104385):0.003943):0.010453,(D97DCKS39:0.103058,D97DCMBS342:0.103058):0.015722):0.001709,(D97DCKMST144:0.103877,D97DCKS29:0.103877):0.016613):0.004749):0.007051,D97DCKFE53:0.132289):0.064709):0.012112,((((C97DCKCD11:0.130468,((((C97DCKFE372:0.081730,C97DCMBFE92:0.081730):0.023286,((((C97DCKTB110:0.096163,(C97DCMBFE14:0.093774,(C97DCMBFE300:0.089218,(C97DCMBFE34:0.069633,C97DCMBS37:0.069633):0.019585):0.004557):0.002390):0.003304,(C97DCMBFE61:0.087463,C97DCMBTB58:0.087463):0.012005):0.002932,C97DCMBTB11:0.102399):0.002618,C97DCMBTB10:0.105017):0.000001):0.007562,C97DCSJFE59:0.112580):0.011703,((C97DCMBS20:0.065542,C97DCMBTB3:0.065542):0.019087,C97DCMBS33:0.084628):0.039654):0.006187):0.005444,(C97DCMBS80:0.114630,C97DCMBTB13:0.114630):0.021282):0.056420,(((F97DCF1EQS16:0.131458,((F97DCF1KP35:0.068281,((F97DCF1KP40:0.054440,F97DCF1KTB136:0.054440):0.007403,F97DCF1KTB50:0.061843):0.006438):0.027048,((F97DCF1KS50:0.079898,F97DCF1KTB165:0.079898):0.008707,F97DCF1MBFE183:0.088605):0.006724):0.036129):0.033308,(((((K97DCEQTB43:0.092859,K97DCKTB160:0.092859):0.006717,(K97DCKP13:0.083167,K97DCKTB111:0.083167):0.016410):0.014149,K97DCMBFE71:0.113728):0.006534,K97DCKTB1:0.120261):0.010952,U97DCKTB17:0.131213):0.033553):0.013338,U97DCEQS8:0.178107):0.014226):0.012566,(((((((G97DCKCC1:0.123110,(((G97DCKFE181:0.085712,G97DCKTB56:0.085712):0.021918,(G97DCKFE77:0.095370,G97DCKP74:0.095370):0.012260):0.011021,((((G97DCKMST100:0.084544,G97DCKMST85:0.084544):0.009980,G97DCMBTB7:0.094524):0.002757,G97DCKS4:0.097281):0.014591,(G97DCKTB142:0.092882,G97DCKTB18:0.092882):0.018988):0.006781):0.004459):0.005898,(((G97DCKMST10:0.084568,G97DCKS30:0.084568):0.015160,G97DCMBFE91:0.099729):0.008825,G97DCKS27:0.108553):0.020456):0.021182,U97DCKTB22:0.150192):0.016657,U97DCKMST135:0.166847):0.009855,U97DCEQS29:0.176702):0.002466,((((J97DCKFE339:0.095333,J97DCMBTB4:0.095333):0.027238,(((J97DCKS22:0.087519,J97DCMBS41:0.087519):0.016195,J97DCKTB147:0.103713):0.013596,J97DCKTB14:0.117310):0.005262):0.020483,J97DCKS16:0.143056):0.012649,U97DCKMST120:0.155705):0.023463):0.025732,(((H97DCEQTB1:0.130368,(H97DCEQTB80:0.130368,(((H97DCKP63:0.106197,H97DCKTB158:0.106197):0.012343,H97DCKS18:0.118539):0.009461,(H97DCKS42:0.114776,H97DCKTB176:0.114776):0.013225):0.002367):0.000001):0.009940,H97DCKTB62:0.140307):0.006118,(((H97DCKCD2:0.096561,(H97DCKMST43:0.088784,(H97DCKTB140:0.078438,H97DCKTB188:0.078438):0.010346):0.007777):0.006028,H97DCKS38:0.102590):0.010076,((H97DCKS43:0.095068,H97DCKTB32:0.095068):0.014928,H97DCKTB52:0.109996):0.002670):0.033759):0.058474):0.000001):0.004212);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();

        String popsizes = "392.071008 525.528096   4.282220  78.750630  55.714176   0.703120  16.730142  12.972570   6.637800  35.709156  19.400745  35.214998   6.385680 " +
                "35.844750   7.630949   0.614367  16.448256   4.466000   1.431150   6.095655   5.594128  13.117752  83.866950   8.705190   4.414956   4.965912 " +
                "0.679189  17.844585   1.501830   2.552906   1.491939   9.141741   0.154560   0.050880   4.308423   5.779798   8.584446   0.012090   3.413410 " +
                "4.759524   0.558144   3.029664   4.326150   8.079525   0.275650   0.685314  11.610942   3.101405  15.221520   0.586872   2.721004   8.229042 " +
                "0.345450   1.371930   0.364458   3.715029   2.450108   0.559980   6.304365   0.098021   2.905518   1.711908   5.424055   1.349985   5.960832 " +
                "4.616704   0.128016   7.024500   1.805750   0.945624   0.330132   1.550010   0.994620   1.156680   0.463386   2.202057   0.264654   1.507420 " +
                "0.006555   0.225435   5.024432   0.665112   0.989010   0.779350   3.460968   0.739584   0.357273   0.005565  11.160240   0.433836   0.604095 " +
                "0.741744   1.121100   5.623200   3.851694   0.066542   0.321264   0.004560   1.951205   0.834861   2.010660   2.737644   0.671580   0.192240 " +
                "1.801360   0.375144   0.774387   1.191530   0.003570   0.006972   0.547883   2.899233   0.456840   2.742880   0.690144   1.027026   2.048200 " +
                "0.632700   0.419025   1.704331   1.742364   3.961800   0.802655   1.717065   0.201756   1.482978   0.765006   0.002145   0.139360   0.514080 " +
                "0.285138   0.491660   0.309270   0.125670   0.242962   2.031537   0.169176   1.670900   0.172260   0.291924   0.294892   1.074060   0.142800 " +
                "0.161700   0.244608   0.104904   1.277742   0.148005   0.082170   0.002838   1.408680   0.316848   0.123000   0.418860   0.869934   0.672771 " +
                "1.772892   0.000630   0.000595   0.053295   0.532224   0.674064   0.000465   0.044805   0.303282   0.092610   0.290979   0.911300   0.209700 " +
                "0.000276   0.030107   1.014783   0.577080   0.253460   0.348156   0.291618   0.252688   0.140760   0.455910   0.825006   0.119418   0.035970 " +
                "0.542025   0.063315   0.038124   0.060676   0.231000   0.069975   0.000010   0.047394   0.000003   0.004212";

        skyline1.initByName("popSizes", popsizes, "treeIntervals", intervals);

        double logP = skyline1.calculateLogP();

        double C = 0;
        for (int i = 0; i < 192; i++) {
            C += Math.log(Binomial.choose2(i+2));
        }

        // Does not actually reach quite the same accuracy, probably since some intervals are very short/unlikely
        // Is the numerical stability issue in BEAST or in R?
        double expected = 1408.966040088043;
        assertEquals(expected, logP+C, 1E-4);
        //System.out.println(logP + "\t" + C +"\t" + (logP+C));
    }


    @Test
    public void testApeTreeLikelihood3 () {

        System.out.println("BSP compared to generalized skyline plot in Ape: " +
                "Big tree with homochronous sampling.");

        Tree tree = new TreeParser("(((((((((((A97DCA1EQTB52:0.077166,A97DCA1MBFE185:0.077166):0.008836,(A97DCA1MBS12:0.049821,A97DCA1MBS30:0.049821):0.036182):0.010266,A97DCA1SJDS17:0.096270):0.003116,(A97DCA1KCD9:0.083123,A97DCA1KTB185:0.083123):0.016262):0.002506,A97DCA1KFE58:0.101892):0.046439,(A97DCA1KP18:0.119083,(A97DCA1KP28:0.092297,(A97DCA1KP78:0.090247,A97DCA1MBS63:0.090247):0.002049):0.026786):0.029248):0.003031,(((A97DCA2KP82:0.050058,A97DCA2KP86:0.050058):0.067136,A97DCA2MBCD5:0.117195):0.027195,((((A97DCEQS1:0.101879,A97DCKFE326:0.101879):0.014125,A97DCMBS32:0.116003):0.019791,(A97DCEQS18:0.091575,A97DCKP72:0.091575):0.044219):0.000001,((((((A97DCEQS25:0.078087,A97DCKS34:0.078087):0.036307,A97DCKS47:0.114394):0.006016,(A97DCKMST147:0.103929,(A97DCKMST89:0.091417,A97DCKTB6:0.091417):0.012512):0.016482):0.000086,((((A97DCEQTB44:0.108703,((A97DCKDS85:0.080907,A97DCMBS26:0.080907):0.023577,A97DCKTB79:0.104485):0.004218):0.005284,(A97DCKTB118:0.090239,A97DCKTB132:0.090239):0.023749):0.000575,(A97DCKCC4:0.111547,(((A97DCKP25:0.087787,A97DCKTB7:0.087787):0.018267,A97DCMBS9:0.106055):0.001233,(A97DCKS36:0.094007,A97DCKTB37:0.094007):0.013281):0.004259):0.003015):0.004429,(((A97DCKCD6:0.082435,(A97DCMBFE149:0.069344,A97DCMBFE247:0.069344):0.013092):0.000001,((A97DCKFE198:0.065151,A97DCKP77:0.065151):0.013338,(A97DCKMST52:0.070506,A97DCKS7:0.070506):0.007982):0.003946):0.012315,A97DCKTB36:0.094750):0.024241):0.001504):0.007409,(((A97DCKP36:0.107066,A97DCKTB16:0.107066):0.009046,(A97DCMBS28:0.105021,A97DCMBTB54:0.105021):0.011089):0.011793,(((A97DCKP5:0.113319,(((A97DCMBFE155:0.079795,(A97DCMBFE244:0.057624,A97DCMBFE78:0.057624):0.022171):0.017550,A97DCMBS7:0.097346):0.000001,A97DCMBS341:0.097346):0.015975):0.000815,((A97DCKTB157:0.094386,(A97DCMBP2:0.070132,A97DCMBS4:0.070132):0.024254):0.005564,A97DCMBTB29:0.099950):0.014184):0.007922,A97DCMBDS17:0.122057):0.005848):0.000001):0.000001,((((((A97DCEQS45:0.059728,A97DCEQS49:0.059728):0.021193,A97DCKS56:0.080921):0.007725,A97DCEQTB14:0.088646):0.028870,A97DCKTB20:0.117516):0.000214,A97DCKTB44:0.117729):0.004694,((((((A97DCKCC2:0.021163,A97DCKCC3:0.021163):0.050237,A97DCKTB13:0.071400):0.033783,A97DCKMST140:0.105183):0.004152,(A97DCKMST121:0.101085,((A97DCKP43:0.069726,A97DCKP79:0.069726):0.025382,(A97DCKS55:0.094174,A97DCKTB124:0.094174):0.000933):0.005977):0.008249):0.004330,((A97DCKFE4:0.067768,A97DCKS10:0.067768):0.012439,A97DCKTB48:0.080208):0.033457):0.000001,((A97DCKFE288:0.080093,(A97DCMBFE5:0.063013,A97DCSJFE26:0.063013):0.017081):0.009386,(A97DCKMST50:0.082718,A97DCKS14:0.082718):0.006759):0.024185):0.008758):0.005482):0.007891):0.008594):0.006973):0.029972,(((U97DCKFE267:0.068246,U97DCKTB119:0.068246):0.012677,U97DCMBFE250:0.080923):0.085378,U97DCKMST91:0.166301):0.015033):0.015665,(((E97DCEQS21:0.083436,(E97DCEQS5:0.077774,E97DCKP14:0.077774):0.005662):0.007143,E97DCEQTB60:0.090579):0.044516,(U97DCKFE45:0.089540,U97DCKTB49:0.089540):0.045555):0.061904):0.000001,(((D97DCD1KCD4:0.088821,D97DCD1KMST126:0.088821):0.036417,((((((((((D97DCD1KS2:0.059334,D97DCKP54:0.059334):0.024482,D97DCKP44:0.083817):0.006959,D97DCKTB181:0.090775):0.006373,(D97DCMBS55:0.057578,D97DCMBS56:0.057578):0.039570):0.004811,(D97DCD2KTB23:0.096432,D97DCKMST66:0.096432):0.005529):0.000001,(D97DCKMST30:0.058580,D97DCKP1:0.058580):0.043380):0.002729,((D97DCKS11:0.081263,D97DCKTB27:0.081263):0.013417,(D97DCKTB4:0.094129,D97DCMBS35:0.094129):0.000553):0.010008):0.003638,(D97DCD2KS26:0.104385,D97DCKS15:0.104385):0.003943):0.010453,(D97DCKS39:0.103058,D97DCMBS342:0.103058):0.015722):0.001709,(D97DCKMST144:0.103877,D97DCKS29:0.103877):0.016613):0.004749):0.007051,D97DCKFE53:0.132289):0.064709):0.012112,((((C97DCKCD11:0.130468,((((C97DCKFE372:0.081730,C97DCMBFE92:0.081730):0.023286,((((C97DCKTB110:0.096163,(C97DCMBFE14:0.093774,(C97DCMBFE300:0.089218,(C97DCMBFE34:0.069633,C97DCMBS37:0.069633):0.019585):0.004557):0.002390):0.003304,(C97DCMBFE61:0.087463,C97DCMBTB58:0.087463):0.012005):0.002932,C97DCMBTB11:0.102399):0.002618,C97DCMBTB10:0.105017):0.000001):0.007562,C97DCSJFE59:0.112580):0.011703,((C97DCMBS20:0.065542,C97DCMBTB3:0.065542):0.019087,C97DCMBS33:0.084628):0.039654):0.006187):0.005444,(C97DCMBS80:0.114630,C97DCMBTB13:0.114630):0.021282):0.056420,(((F97DCF1EQS16:0.131458,((F97DCF1KP35:0.068281,((F97DCF1KP40:0.054440,F97DCF1KTB136:0.054440):0.007403,F97DCF1KTB50:0.061843):0.006438):0.027048,((F97DCF1KS50:0.079898,F97DCF1KTB165:0.079898):0.008707,F97DCF1MBFE183:0.088605):0.006724):0.036129):0.033308,(((((K97DCEQTB43:0.092859,K97DCKTB160:0.092859):0.006717,(K97DCKP13:0.083167,K97DCKTB111:0.083167):0.016410):0.014149,K97DCMBFE71:0.113728):0.006534,K97DCKTB1:0.120261):0.010952,U97DCKTB17:0.131213):0.033553):0.013338,U97DCEQS8:0.178107):0.014226):0.012566,(((((((G97DCKCC1:0.123110,(((G97DCKFE181:0.085712,G97DCKTB56:0.085712):0.021918,(G97DCKFE77:0.095370,G97DCKP74:0.095370):0.012260):0.011021,((((G97DCKMST100:0.084544,G97DCKMST85:0.084544):0.009980,G97DCMBTB7:0.094524):0.002757,G97DCKS4:0.097281):0.014591,(G97DCKTB142:0.092882,G97DCKTB18:0.092882):0.018988):0.006781):0.004459):0.005898,(((G97DCKMST10:0.084568,G97DCKS30:0.084568):0.015160,G97DCMBFE91:0.099729):0.008825,G97DCKS27:0.108553):0.020456):0.021182,U97DCKTB22:0.150192):0.016657,U97DCKMST135:0.166847):0.009855,U97DCEQS29:0.176702):0.002466,((((J97DCKFE339:0.095333,J97DCMBTB4:0.095333):0.027238,(((J97DCKS22:0.087519,J97DCMBS41:0.087519):0.016195,J97DCKTB147:0.103713):0.013596,J97DCKTB14:0.117310):0.005262):0.020483,J97DCKS16:0.143056):0.012649,U97DCKMST120:0.155705):0.023463):0.025732,(((H97DCEQTB1:0.130368,(H97DCEQTB80:0.130368,(((H97DCKP63:0.106197,H97DCKTB158:0.106197):0.012343,H97DCKS18:0.118539):0.009461,(H97DCKS42:0.114776,H97DCKTB176:0.114776):0.013225):0.002367):0.000001):0.009940,H97DCKTB62:0.140307):0.006118,(((H97DCKCD2:0.096561,(H97DCKMST43:0.088784,(H97DCKTB140:0.078438,H97DCKTB188:0.078438):0.010346):0.007777):0.006028,H97DCKS38:0.102590):0.010076,((H97DCKS43:0.095068,H97DCKTB32:0.095068):0.014928,H97DCKTB52:0.109996):0.002670):0.033759):0.058474):0.000001):0.004212);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();

        String popsizes   = "392.07100800 525.52809600  26.43747675  18.16241385   4.32071145   2.19342354   1.06974257   0.55211856   0.27727433   0.33138171   0.38060475 0.09827875   0.02431880";
        String groupsizes = "1  1  8 13 33 39 35 27 15  7  4  4  5";
        skyline1.initByName("popSizes", popsizes, "popSizeGroupSizes", groupsizes, "treeIntervals", intervals);

        double logP = skyline1.calculateLogP();

        double C = 0;
        for (int i = 0; i < 192; i++) {
            C += Math.log(Binomial.choose2(i+2));
        }

        // Does not actually reach quite the same accuracy, probably since some intervals are very short/unlikely
        // Is the numerical stability issue in BEAST or in R?
        double expected = 1239.478307334919;
        assertEquals(expected, logP+C, 1E-4);
        //System.out.println(logP + "\t" + C +"\t" + (logP+C));

        System.out.println(skyline1);

    }


    /**********************************************************************/
    /* Comparisons to Bayesian Skyline plot as implemented in BEAST2 core */
    /**********************************************************************/

    @Test
    public void testBSPTreeLikelihood1 () {

        System.out.println("BSP compared to old Bayesian Skyline implementation: " +
                "Tree with homochronous sampling.");

        Tree tree = new TreeParser("((D4Philip56:30.0,(D4Philip64:23.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:25.0,(D4Thai78:11.0,D4Thai84:11.0):14.0):15.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        BayesianSkyline skyline2 = new BayesianSkyline();
        skyline2.initByName("popSizes", "1.0 2.0", "groupSizes", "2 3", "treeIntervals", intervals);

        double logP1 = skyline1.calculateLogP();
        double logP2 = skyline2.calculateLogP();

        assertEquals(logP2, logP1);
        System.out.println(logP1+"\t"+logP2);
    }


    @Test
    public void testBSPTreeLikelihood2 () {

        System.out.println("BSP compared to old Bayesian Skyline implementation: "+
                "Tree with all sampling and coalescent times at unique times");

        Tree tree = new TreeParser("((((D4Mexico84:5.0,D4ElSal94:15.0):1.0,D4PRico86:8.0):1.0,D4Tahiti79:2.0):5.0,D4Indon77:5.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 2", "treeIntervals", intervals);

        BayesianSkyline skyline2 = new BayesianSkyline();
        skyline2.initByName("popSizes", "1.0 2.0", "groupSizes", "2 2", "treeIntervals", intervals);

        double logP1 = skyline1.calculateLogP();
        double logP2 = skyline2.calculateLogP();

        assertEquals(logP2, logP1);
        System.out.println(logP1+"\t"+logP2);
        System.out.println(skyline1);


    }


    @Test
    public void testBSPTreeLikelihood3 () {

        System.out.println("BSP compared to old Bayesian Skyline implementation: "+
                "Tree with all coalescent times at unique times, sampling times not unique");

        Tree tree = new TreeParser("((D4Philip56:2.0,(D4Philip64:3.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:19.0,(D4Thai78:5.0,D4Thai84:11.0):14.0):15.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        BayesianSkyline skyline2 = new BayesianSkyline();
        skyline2.initByName("popSizes", "1.0 2.0", "groupSizes", "2 3", "treeIntervals", intervals);

        double logP1 = skyline1.calculateLogP();
        double logP2 = skyline2.calculateLogP();

        assertEquals(logP2, logP1);
        System.out.println(logP1+"\t"+logP2);

    }


    @Test
    public void testBSPTreeLikelihood4 () {

        System.out.println("BSP compared to old Bayesian Skyline implementation: "+
                "Tree with both coalescent and sampling times at non-unique times.");

        Tree tree = new TreeParser("((D4Philip56:2.0,(D4Philip64:3.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:17.0,(D4Thai78:5.0,D4Thai84:11.0):12.0):17.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        BayesianSkyline skyline2 = new BayesianSkyline();
        skyline2.initByName("popSizes", "1.0 2.0", "groupSizes", "2 3", "treeIntervals", intervals);

        double logP1 = skyline1.calculateLogP();
        double logP2 = skyline2.calculateLogP();

        assertEquals(logP2, logP1);
        System.out.println(logP1+"\t"+logP2);

    }

    @Test
    public void testBSPTreeLikelihood5 () {

        System.out.println("BSP compared to old Bayesian Skyline implementation: "+
                "Tree with a sampling event between the coalescent events that define a group boundary");

        Tree tree = new TreeParser("((D4Philip56:2.0,(D4Philip64:3.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:26.0,(D4Thai78:5.0,D4Thai84:11.0):21.0):8.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        BayesianSkyline skyline2 = new BayesianSkyline();
        skyline2.initByName("popSizes", "1.0 2.0", "groupSizes", "2 3", "treeIntervals", intervals);

        //System.out.println("BSP");
        double logP1 = skyline1.calculateLogP();

        //System.out.println();
        //System.out.println("Bayesian Skyline Plot");
        double logP2 = skyline2.calculateLogP();

        assertEquals(logP2, logP1);
        System.out.println(logP1+"\t"+logP2);

    }


    @Test
    public void testBSPTreeLikelihoodBison () {

        System.out.println("BSP compared to old Bayesian Skyline implementation: "+
                "Big ladder-like tree, with many sampling events between coalescent events and with LTT plot "+
                "often dropping to 1 (from early in the MCMC chain)");

        Tree tree = new TreeParser("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((BS100_29_5:2.084412287,((BS102_22_5:2.9805004,((((U12935_0_0:0.05374739697,U12943_0_0:0.05374739697):0.04839617861,U12947_0_0:0.1021435756):0.2419631968,U12959_0_0:0.3441067723):1.563440085,((((((U12936_0_0:0.09616848562,(U12941_0_0:0.05921357208,U12956_0_0:0.05921357208):0.03695491354):0.005753313849,U12948_0_0:0.1019217995):0.1253679664,U12944_0_0:0.2272897658):0.1862522797,U12945_0_0:0.4135420455):0.1987289635,(U12957_0_0:0.1022294964,U12958_0_0:0.1022294964):0.5100415126):0.1241136649,(U12946_0_0:0.4422855438,U12955_0_0:0.4422855438):0.2940991301):1.171162184):23.07295354):2.453675198,BS99_26_5:1.434175599):3.650236689):131.4077404,BS456_AB_125_30:37.49215267):2.514860062,BS200_AB_145_37:20.00701273):27.56266151,BS175_ICE_189_90:3.569674245):23.52567504,BS424_AB_216_86:0.09534928164):124.863948,BS454_AB_337_51:3.959297303):91.49395652,BS469_AB_305_24:127.4532538):179.3704358,BS445_AB_450_53:161.8236896):47.63133212,BS444_AB_615_37:44.4550217):60.72180552,BS434_AB_715_26:5.176827218):102.1185495,BS422_AB_822_52:0.2953766972):1.492655943,BS417_AB_823_51:0.7880326406):430.4530816,BS441_AB_1220_44:34.24111423):383.8329396,BS123_BlR_1638_77:0.07405387499):541.7912857,BS289_BlR_2179_70:0.8653396229):315.5036824,BS490_BlR_2420_75:75.36902206):123.9580692,BS198_Y_2534_113:85.32709131):247.7276779,BS517_BlR_2669_71:198.0547692):20.45139091,BS503_BlR_2863_42:24.5061601):10.97477116,BS560_AB_2898_36:0.4809312615):506.6176572,BS177_NTC_3376_30:29.09858845):28.65856508,BS173_NTC_3433_45:0.7571535294):84.720026,BS466_AB_3518_51:0.4771795275):384.9204597,BS569_AB_3903_93:0.3976392746):1268.89072,BS414_BlR_5155_126:17.28835897):215.5283239,BS423_AB_5387_58:0.8166829133):728.237248,BS464_AB_5949_44:167.0539309):582.8429673,BS439_AB_6658_49:40.89689818):337.3763959,BS222_NWT_6977_65:59.2732941):552.557293,BS148_NS_7326_56:262.8305871):270.3323102,BS429_AB_7620_31:239.1628973):51.25573558,BS426_AB_7898_47:12.41863287):26.41015496,BS428_AB_7936_37:0.8287878281):6.302206759,BS465_AB_7943_40:0.1309945867):237.3515723,BS432_AB_8126_56:54.48256684):837.5396176,BS419_AB_8309_54:709.0221845):605.4519682,BS421_AB_9068_59:555.4741526):657.6644339,BS130_BlR_10124_336:157.1385865):621.6201994,BS321_AK_10773_101:129.7587859):1066.940373,BS254_CHL_11969_101:0.699158435):183.8070071,BS342_CHL_12142_84:11.50616555):70.07355066,BS337_CHL_12219_95:4.57971621):108.2175243,BS460_AB_12322_112:9.797240487):59.00671852,BS433_AB_12368_110:22.80395901):73.79517552,BS348_CHL_12458_69:6.599134521):0.6145554357,BS150_NS_12463_74:2.213689957):614.2512313,BS237_AB_13078_74:1.464921258):82.5880023,BS570_AB_13158_281:4.052923553):575.9723074,BS124_BlR_13734_67:4.02523091):330.6045812,BS145_NS_14064_82:4.629812064):117.7154369,BS248_OCr_14184_133:2.345248939):104.0134893,BS318_NS_14287_125:3.358738198):29.45497453,BS311_BlR_14318_121:1.81371273):89.27452777,IB179_LC_14407_172:2.088240501):237.091851,BS172_LC_14530_155:116.1800915):107.2776067,BS253_LC_14753_112:0.4576982221):318.0973969,BS261_LC_15046_120:25.55509517):108.3132857,BS201_Y_15098_116:81.8683809):88.1652418,BS170_YT_15189_126:79.0336227):18.74944095,BS224_AK_15286_132:0.7830636448):13.12005094,BS284_Y_15298_125:1.903114585):119.7796994,BS472_F_15412_127:7.682814011):4.454656801,BS163_LC_15418_135:6.137470811):1906.147783,BS218_Si_17329_200:1.285254286):2485.529868,BS233_SW_19815_112:0.8151224325):1490.337248,BS178_LC_21306_158:0.1523701607):1474.005541,BS126_F_22778_353:2.15791125):331.0176528,BS121_F_23050_392:61.17556407):12.48968043,BS236_SW_23123_196:0.6652444968):202.3542852,BS164_LC_23319_207:7.019529657):12.30196438,BS107_F_23338_405:0.3214940381):579.6318829,BS359_NTC_23916_185:1.953376941):366.0586527,BS605_NTC_24283_104:1.012029666):469.5114733,BS109_F_24752_474:1.523502991):404.4798992,BS108_F_25148_507:10.0034022):721.1205005,BS151_NS_25879_207:0.1239027384):78.42766282,BS111_F_25920_503:37.55156555):649.5185328,BS258_F_26606_184:1.070098317):1521.171725,BS105_F_28036_538:92.24182304):280.6467887,BS396_NS_28375_237:33.88861171):78.27657458,BS206_Sibh_28487_208:0.1651862873):816.0625314,BS340_NS_29303_251:0.2277176441):73.90406949,BS564_Si_29377_158:0.131787137):1833.301466,BS498_NS_31210_284:0.433253521):257.5601107,BS244_LC_31459_232:8.993364252):383.6223576,BS192_F_31555_353:296.6157219):94.06944636,BS165_LC_31728_228:217.6851682):141.1248209,BS418_China_31830_741:256.8099891):890.3702295,BS125_F_32769_852:208.1802186):513.934105,BS147_NS_33491_340:0.1143235751):959.6138264,BS195_NS_34450_377:0.7281500114):23.90220214,BS674_Ura_34474_197:0.6303521526):387.5154187,BS262_D_34559_528:303.1457708):61.4872227,BS660_Ura_34923_193:0.6329935438):65.39683109,BS495_NS_34987_363:2.029824635):573.6807969,BS497_NS_35399_537:163.7106215):462.8699497,BS412_Y_35875_270:150.5805712):165.3953028,BS260_D_36116_312:74.97587406):280.2128059,BS415_D_36194_976:277.1886799):153.2302502,BS713_Ura_36331_219:293.4189301):159.8223788,BS499_NS_36784_452:0.241308893):166.8679754,BS327_D_36904_276:47.10928426):61.60750248,BS390_NS_37007_470:5.716786737):58.00732761,BS328_SIdy_37069_233:1.724114345):691.2905107,BS397_NS_37762_498:0.01462506046):723.5143988,BS571_SIdy_38309_229:176.5290239):225.641126,BS387_NS_38708_551:3.170149927):378.3114998,BS477_D_39089_277:0.4816497296):131.3264089,BS133_F_39219_1838:1.808058658):203.7176563,BS443_AB_39422_466:2.525714938):484.8788369,BS478_D_39836_261:73.40455186):919.1040976,BS395_NS_40700_1300:128.5086494):191.6664121,BS500_NS_40878_529:142.1750616):370.5895362,BS292_NS_40991_686:399.7645978):398.7034148,BS392_NS_41536_712:253.4680126):810.0097835,BS394_NS_42528_788:71.47779606):189.9404265,BS243_SW_42608_385:181.4182225):42.15284118,BS323_SI_42831_370:0.5710637096):772.8286767,BS350_NS_43597_885:7.399740423):82.25328661,BS364_NS_43685_971:1.653027032):406.2160639,BS249_F_44027_508:65.86909089):462.3248842,BS345_NS_44554_1062:1.193975056):441.3819789,BS393_NS_44598_1063:398.5759539):431.7774554,BS281_BlR_45428_564:0.3534093479):1479.904549,BS592_Ura_46908_440:0.2579579691):438.6697356,BS211_Sibh_47345_1795:1.927693539):351.5617217,BS235_BlR_47663_812:35.48941523):2277.01458,BS149_NS_49975_3033:0.5039948626):886.2517975,BS459_China_50597_2210:264.7557924):241.8925629,BS708_Ura_50652_2042:451.6483552):332.1410945,BS216_NS_51433_4004:2.789449758):2403.645893,BS287_BlR_53766_3094:73.4353423):747.6764163,BS320_SI_54524_3181:63.11175864):453.3833946,BS291_NS_54640_3130:400.4951533):17.62790702,BS193_NS_54973_5578:85.12306029):124.0691503,BS493_NS_55182_5568:0.1922106354):0;\n",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        //skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "100 51", "treeIntervals", intervals);
        skyline1.initByName("popSizes", "35017.63   36425.65   66057.35   22285.75   13393.43   26221.20   63538.49   59451.34  349364.23 1583978.97 1362463.13  636944.34  570545.92  566409.33  112880.62   49455.34   67857.56  147928.56   78866.78 13162.79",
                                     "popSizeGroupSizes", "7  2 21  7  5  7  3  4 14  7 13 12  2 11  1 12  2 11  7  3",
                                     "treeIntervals", intervals);

        BayesianSkyline skyline2 = new BayesianSkyline();
        //skyline2.initByName("popSizes", "1.0 2.0", "groupSizes", "100 51", "treeIntervals", intervals);
        skyline2.initByName("popSizes", "35017.63   36425.65   66057.35   22285.75   13393.43   26221.20   63538.49   59451.34  349364.23 1583978.97 1362463.13  636944.34  570545.92  566409.33  112880.62   49455.34   67857.56  147928.56   78866.78 13162.79",
                                     "groupSizes", "7  2 21  7  5  7  3  4 14  7 13 12  2 11  1 12  2 11  7  3",
                                     "treeIntervals", intervals);


        //System.out.println("BSP");
        double logP1 = skyline1.calculateLogP();

        //System.out.println();
        //System.out.println("Bayesian Skyline Plot");
        double logP2 = skyline2.calculateLogP();

        assertEquals(logP2, logP1);
        //System.out.println(logP1+"\t"+logP2);

    }

    /*****************************/
    /* Getting change-time tests */
    /*****************************/

    @Test
    public void testChangeTimes1 () {

        System.out.println("Getting change times: All group sizes 1.");

        Tree tree = new TreeParser("((D4Philip56:2.0,(D4Philip64:3.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:19.0,(D4Thai78:5.0,D4Thai84:11.0):14.0):15.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "1.0 2.0 3.0 4.0 5.0", "popSizeGroupSizes", "1 1 1 1 1", "treeIntervals", intervals);

        double t;
        double [] expected = {11.0, 23.0, 25.0, 30.0, 40.0};
        for (int i = 0; i < 5; i++) {
            t = skyline1.getPopSizeChangeTime(i);
            //System.out.println(t);
            assertEquals(expected[i], t);
        }

    }

    @Test
    public void testChangeTimes2 () {

        System.out.println("Getting change times: Variable group sizes.");

        Tree tree = new TreeParser("((D4Philip56:2.0,(D4Philip64:3.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:19.0,(D4Thai78:5.0,D4Thai84:11.0):14.0):15.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();
        skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        double t;
        double [] expected = {23.0, 40.0};
        for (int i = 0; i < 2; i++) {
            t = skyline1.getPopSizeChangeTime(i);
            //System.out.println(t);
            assertEquals(expected[i], t);
        }

    }

    @Test
    public void testChangeTimes3 () {

        System.out.println("Getting change times: Big tree comparison to generalized skyline plot in Ape.");

        Tree tree = new TreeParser("(((((((((((A97DCA1EQTB52:0.077166,A97DCA1MBFE185:0.077166):0.008836,(A97DCA1MBS12:0.049821,A97DCA1MBS30:0.049821):0.036182):0.010266,A97DCA1SJDS17:0.096270):0.003116,(A97DCA1KCD9:0.083123,A97DCA1KTB185:0.083123):0.016262):0.002506,A97DCA1KFE58:0.101892):0.046439,(A97DCA1KP18:0.119083,(A97DCA1KP28:0.092297,(A97DCA1KP78:0.090247,A97DCA1MBS63:0.090247):0.002049):0.026786):0.029248):0.003031,(((A97DCA2KP82:0.050058,A97DCA2KP86:0.050058):0.067136,A97DCA2MBCD5:0.117195):0.027195,((((A97DCEQS1:0.101879,A97DCKFE326:0.101879):0.014125,A97DCMBS32:0.116003):0.019791,(A97DCEQS18:0.091575,A97DCKP72:0.091575):0.044219):0.000001,((((((A97DCEQS25:0.078087,A97DCKS34:0.078087):0.036307,A97DCKS47:0.114394):0.006016,(A97DCKMST147:0.103929,(A97DCKMST89:0.091417,A97DCKTB6:0.091417):0.012512):0.016482):0.000086,((((A97DCEQTB44:0.108703,((A97DCKDS85:0.080907,A97DCMBS26:0.080907):0.023577,A97DCKTB79:0.104485):0.004218):0.005284,(A97DCKTB118:0.090239,A97DCKTB132:0.090239):0.023749):0.000575,(A97DCKCC4:0.111547,(((A97DCKP25:0.087787,A97DCKTB7:0.087787):0.018267,A97DCMBS9:0.106055):0.001233,(A97DCKS36:0.094007,A97DCKTB37:0.094007):0.013281):0.004259):0.003015):0.004429,(((A97DCKCD6:0.082435,(A97DCMBFE149:0.069344,A97DCMBFE247:0.069344):0.013092):0.000001,((A97DCKFE198:0.065151,A97DCKP77:0.065151):0.013338,(A97DCKMST52:0.070506,A97DCKS7:0.070506):0.007982):0.003946):0.012315,A97DCKTB36:0.094750):0.024241):0.001504):0.007409,(((A97DCKP36:0.107066,A97DCKTB16:0.107066):0.009046,(A97DCMBS28:0.105021,A97DCMBTB54:0.105021):0.011089):0.011793,(((A97DCKP5:0.113319,(((A97DCMBFE155:0.079795,(A97DCMBFE244:0.057624,A97DCMBFE78:0.057624):0.022171):0.017550,A97DCMBS7:0.097346):0.000001,A97DCMBS341:0.097346):0.015975):0.000815,((A97DCKTB157:0.094386,(A97DCMBP2:0.070132,A97DCMBS4:0.070132):0.024254):0.005564,A97DCMBTB29:0.099950):0.014184):0.007922,A97DCMBDS17:0.122057):0.005848):0.000001):0.000001,((((((A97DCEQS45:0.059728,A97DCEQS49:0.059728):0.021193,A97DCKS56:0.080921):0.007725,A97DCEQTB14:0.088646):0.028870,A97DCKTB20:0.117516):0.000214,A97DCKTB44:0.117729):0.004694,((((((A97DCKCC2:0.021163,A97DCKCC3:0.021163):0.050237,A97DCKTB13:0.071400):0.033783,A97DCKMST140:0.105183):0.004152,(A97DCKMST121:0.101085,((A97DCKP43:0.069726,A97DCKP79:0.069726):0.025382,(A97DCKS55:0.094174,A97DCKTB124:0.094174):0.000933):0.005977):0.008249):0.004330,((A97DCKFE4:0.067768,A97DCKS10:0.067768):0.012439,A97DCKTB48:0.080208):0.033457):0.000001,((A97DCKFE288:0.080093,(A97DCMBFE5:0.063013,A97DCSJFE26:0.063013):0.017081):0.009386,(A97DCKMST50:0.082718,A97DCKS14:0.082718):0.006759):0.024185):0.008758):0.005482):0.007891):0.008594):0.006973):0.029972,(((U97DCKFE267:0.068246,U97DCKTB119:0.068246):0.012677,U97DCMBFE250:0.080923):0.085378,U97DCKMST91:0.166301):0.015033):0.015665,(((E97DCEQS21:0.083436,(E97DCEQS5:0.077774,E97DCKP14:0.077774):0.005662):0.007143,E97DCEQTB60:0.090579):0.044516,(U97DCKFE45:0.089540,U97DCKTB49:0.089540):0.045555):0.061904):0.000001,(((D97DCD1KCD4:0.088821,D97DCD1KMST126:0.088821):0.036417,((((((((((D97DCD1KS2:0.059334,D97DCKP54:0.059334):0.024482,D97DCKP44:0.083817):0.006959,D97DCKTB181:0.090775):0.006373,(D97DCMBS55:0.057578,D97DCMBS56:0.057578):0.039570):0.004811,(D97DCD2KTB23:0.096432,D97DCKMST66:0.096432):0.005529):0.000001,(D97DCKMST30:0.058580,D97DCKP1:0.058580):0.043380):0.002729,((D97DCKS11:0.081263,D97DCKTB27:0.081263):0.013417,(D97DCKTB4:0.094129,D97DCMBS35:0.094129):0.000553):0.010008):0.003638,(D97DCD2KS26:0.104385,D97DCKS15:0.104385):0.003943):0.010453,(D97DCKS39:0.103058,D97DCMBS342:0.103058):0.015722):0.001709,(D97DCKMST144:0.103877,D97DCKS29:0.103877):0.016613):0.004749):0.007051,D97DCKFE53:0.132289):0.064709):0.012112,((((C97DCKCD11:0.130468,((((C97DCKFE372:0.081730,C97DCMBFE92:0.081730):0.023286,((((C97DCKTB110:0.096163,(C97DCMBFE14:0.093774,(C97DCMBFE300:0.089218,(C97DCMBFE34:0.069633,C97DCMBS37:0.069633):0.019585):0.004557):0.002390):0.003304,(C97DCMBFE61:0.087463,C97DCMBTB58:0.087463):0.012005):0.002932,C97DCMBTB11:0.102399):0.002618,C97DCMBTB10:0.105017):0.000001):0.007562,C97DCSJFE59:0.112580):0.011703,((C97DCMBS20:0.065542,C97DCMBTB3:0.065542):0.019087,C97DCMBS33:0.084628):0.039654):0.006187):0.005444,(C97DCMBS80:0.114630,C97DCMBTB13:0.114630):0.021282):0.056420,(((F97DCF1EQS16:0.131458,((F97DCF1KP35:0.068281,((F97DCF1KP40:0.054440,F97DCF1KTB136:0.054440):0.007403,F97DCF1KTB50:0.061843):0.006438):0.027048,((F97DCF1KS50:0.079898,F97DCF1KTB165:0.079898):0.008707,F97DCF1MBFE183:0.088605):0.006724):0.036129):0.033308,(((((K97DCEQTB43:0.092859,K97DCKTB160:0.092859):0.006717,(K97DCKP13:0.083167,K97DCKTB111:0.083167):0.016410):0.014149,K97DCMBFE71:0.113728):0.006534,K97DCKTB1:0.120261):0.010952,U97DCKTB17:0.131213):0.033553):0.013338,U97DCEQS8:0.178107):0.014226):0.012566,(((((((G97DCKCC1:0.123110,(((G97DCKFE181:0.085712,G97DCKTB56:0.085712):0.021918,(G97DCKFE77:0.095370,G97DCKP74:0.095370):0.012260):0.011021,((((G97DCKMST100:0.084544,G97DCKMST85:0.084544):0.009980,G97DCMBTB7:0.094524):0.002757,G97DCKS4:0.097281):0.014591,(G97DCKTB142:0.092882,G97DCKTB18:0.092882):0.018988):0.006781):0.004459):0.005898,(((G97DCKMST10:0.084568,G97DCKS30:0.084568):0.015160,G97DCMBFE91:0.099729):0.008825,G97DCKS27:0.108553):0.020456):0.021182,U97DCKTB22:0.150192):0.016657,U97DCKMST135:0.166847):0.009855,U97DCEQS29:0.176702):0.002466,((((J97DCKFE339:0.095333,J97DCMBTB4:0.095333):0.027238,(((J97DCKS22:0.087519,J97DCMBS41:0.087519):0.016195,J97DCKTB147:0.103713):0.013596,J97DCKTB14:0.117310):0.005262):0.020483,J97DCKS16:0.143056):0.012649,U97DCKMST120:0.155705):0.023463):0.025732,(((H97DCEQTB1:0.130368,(H97DCEQTB80:0.130368,(((H97DCKP63:0.106197,H97DCKTB158:0.106197):0.012343,H97DCKS18:0.118539):0.009461,(H97DCKS42:0.114776,H97DCKTB176:0.114776):0.013225):0.002367):0.000001):0.009940,H97DCKTB62:0.140307):0.006118,(((H97DCKCD2:0.096561,(H97DCKMST43:0.088784,(H97DCKTB140:0.078438,H97DCKTB188:0.078438):0.010346):0.007777):0.006028,H97DCKS38:0.102590):0.010076,((H97DCKS43:0.095068,H97DCKTB32:0.095068):0.014928,H97DCKTB52:0.109996):0.002670):0.033759):0.058474):0.000001):0.004212);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline1 = new BSP();

        String popsizes   = "392.07100800 525.52809600  26.43747675  18.16241385   4.32071145   2.19342354   1.06974257   0.55211856   0.27727433   0.33138171   0.38060475 0.09827875   0.02431880";
        String groupsizes = "1  1  8 13 33 39 35 27 15  7  4  4  5";
        skyline1.initByName("popSizes", popsizes, "popSizeGroupSizes", groupsizes, "treeIntervals", intervals);

        double t;
        double [] expected = {0.021161, 0.049822, 0.061847, 0.077168, 0.089216, 0.101878, 0.113986, 0.127902, 0.140307, 0.155704, 0.176701, 0.192334, 0.209112};
        for (int i = 0; i < 13; i++) {
            t = skyline1.getPopSizeChangeTime(i);
            //System.out.println(expected[i] +"\t" + t);
            assertEquals(expected[i], t,1E-4);
        }

    }

    /**********************************************/
    /* Getting population size at different times */
    /**********************************************/

    @Test
    public void testGetPopSize1() {
        System.out.println("Getting population size: Tree with homochronous sampling.");

        Tree tree = new TreeParser("((D4Philip56:30.0,(D4Philip64:23.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:25.0,(D4Thai78:11.0,D4Thai84:11.0):14.0):15.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline = new BSP();
        skyline.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        // In the future
        assertEquals(skyline.getPopSize(-1.0), 1.0);

        // At present
        assertEquals(skyline.getPopSize(0.0), 1.0);

        // Within first segment
        assertEquals(skyline.getPopSize(0.01), 1.0);
        assertEquals(skyline.getPopSize(12), 1.0);

        // On segment boundary
        assertEquals(skyline.getPopSize(23.0), 1.0);

        // Within second segment
        assertEquals(skyline.getPopSize(23.00001), 2.0);
        assertEquals(skyline.getPopSize(30), 2.0);

        // On tMRCA
        assertEquals(skyline.getPopSize(40), 2.0);


        // Before tMRCA
        assertEquals(skyline.getPopSize(40.00001), 2.0);
        assertEquals(skyline.getPopSize(140), 2.0);
    }


    @Test
    public void testGetPopSize2() {
        System.out.println("Getting population size: Tree with heterochronous sampling.");

        Tree tree = new TreeParser("((((D4Mexico84:5.0,D4ElSal94:15.0):1.0,D4PRico86:8.0):1.0,D4Tahiti79:2.0):5.0,D4Indon77:5.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline = new BSP();
        skyline.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 2", "treeIntervals", intervals);

        // In the future
        assertEquals(skyline.getPopSize(-1.0), 1.0);

        // At present
        assertEquals(skyline.getPopSize(0.0), 1.0);

        // Within first segment
        assertEquals(skyline.getPopSize(0.01), 1.0);
        assertEquals(skyline.getPopSize(12), 1.0);

        // On segment boundary
        assertEquals(skyline.getPopSize(16.0), 1.0);

        // Within second segment
        assertEquals(skyline.getPopSize(16.00001), 2.0);
        assertEquals(skyline.getPopSize(20), 2.0);

        // On tMRCA
        assertEquals(skyline.getPopSize(22), 2.0);


        // Before tMRCA
        assertEquals(skyline.getPopSize(22.00001), 2.0);
        assertEquals(skyline.getPopSize(140), 2.0);
    }


    @Test
    public void testGetPopSize3() {
        System.out.println("Getting population size: Tree with heterochronous sampling (multiple events on segment boundary).");

        Tree tree = new TreeParser("((D4Philip56:2.0,(D4Philip64:3.0,D4Philip84:23.0):7.0):10.0,(D4SLanka78:17.0,(D4Thai78:5.0,D4Thai84:11.0):12.0):17.0);",false);
        TreeIntervals intervals = new TreeIntervals(tree);

        //BSP skyline1 = new BSP();
        //skyline1.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        BSP skyline = new BSP();
        skyline.initByName("popSizes", "1.0 2.0", "popSizeGroupSizes", "2 3", "treeIntervals", intervals);

        // In the future
        assertEquals(skyline.getPopSize(-1.0), 1.0);

        // At present
        assertEquals(skyline.getPopSize(0.0), 1.0);

        // Within first segment
        assertEquals(skyline.getPopSize(0.01), 1.0);
        assertEquals(skyline.getPopSize(12), 1.0);

        // On segment boundary
        assertEquals(skyline.getPopSize(23.0), 1.0);

        // Within second segment
        assertEquals(skyline.getPopSize(23.00001), 2.0);
        assertEquals(skyline.getPopSize(30), 2.0);

        // On tMRCA
        assertEquals(skyline.getPopSize(40), 2.0);


        // Before tMRCA
        assertEquals(skyline.getPopSize(40.00001), 2.0);
        assertEquals(skyline.getPopSize(140), 2.0);
    }




    // Original single BSP unit test - effectively useless, doesn't test likelihood or any boundary conditions
    @Test
    public void testSkyline() throws Exception {

        //RealParameter popSize = new RealParameter("1.0", 0.0, 10.0, 2);
        //IntegerParameter groupSize = new IntegerParameter("2", 1, 4, 2);

        //popSize.setValue(1, 2.0);

        Tree tree = new Tree("(((1:1,2:1):2.5,(3:1.5,4:1.5):2):2,5:5.5);");
        TreeIntervals intervals = new TreeIntervals(tree);

        BSP skyline = new BSP();
        //skyline.init(popSize, groupSize, intervals);
        skyline.initByName("popSizes", "1.0 2.0",
                "popSizeGroupSizes", "2 2",
                "treeIntervals", intervals);

        assertEquals(skyline.getPopSize(0.01), 1.0);
        assertEquals(skyline.getPopSize(1.49), 1.0);
        assertEquals(skyline.getPopSize(1.51), 2.0);
        assertEquals(skyline.getPopSize(5.51), 2.0);
    }
    
    
}
